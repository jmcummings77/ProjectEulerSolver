using ProjectEulerSolver.Interfaces;
using ProjectEulerSolver.Tools;
using ProjectEulerSolver.Model;
using System.Numerics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Threading.Tasks;

namespace ProjectEulerSolver.Problems
{
    public class Problem61 : BaseProblem, IProblem
    {
        public Problem61()
        {
            Number = 61;
            Prompt = "Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae: " +
                     "Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ... " +
                     "Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ... " +
                     "Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ... " +
                     "Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ... " +
                     "Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ... " +
                     "Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ... " +
                     "The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties. " +
                     "The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first). " +
                     "Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set. " +
                     "This is the only set of 4-digit numbers with this property. " +
                     "Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.";
        }
        public static List<int> GetTriangleNumbers(int lowerBound, int upperBound)
        {
            List<int> Numbers = new List<int>();
            int result = 0;
            int n = 0;
            while(result < upperBound)
            {
                n++;
                result = n * (n + 1) / 2;
                if(result > lowerBound)
                {
                    Numbers.Add(result);
                }
            }
            return Numbers;
        }
        public static List<int> GetSquareNumbers(int lowerBound, int upperBound)
        {
            List<int> Numbers = new List<int>();
            int result = 0;
            int n = 0;
            while (result < upperBound)
            {
                n++;
                result = n * n;
                if (result > lowerBound)
                {
                    Numbers.Add(result);
                }
            }
            return Numbers;
        }
        public static List<int> GetPentagonNumbers(int lowerBound, int upperBound)
        {
            List<int> Numbers = new List<int>();
            int result = 0;
            int n = 0;
            while (result < upperBound)
            {
                n++;
                result = n * (3 * n - 1) / 2;
                if (result > lowerBound)
                {
                    Numbers.Add(result);
                }
            }
            return Numbers;
        }
        public static List<int> GetHexagonNumbers(int lowerBound, int upperBound)
        {
            List<int> Numbers = new List<int>();
            int result = 0;
            int n = 0;
            while (result < upperBound)
            {
                n++;
                result = n * (2 * n - 1);
                if (result > lowerBound)
                {
                    Numbers.Add(result);
                }
            }
            return Numbers;
        }
        public static List<int> GetHeptagonNumbers(int lowerBound, int upperBound)
        {
            List<int> Numbers = new List<int>();
            int result = 0;
            int n = 0;
            while (result < upperBound)
            {
                n++;
                result = n * (5 * n - 3) / 2;
                if (result > lowerBound)
                {
                    Numbers.Add(result);
                }
            }
            return Numbers;
        }
        public static List<int> GetOctagonNumbers(int lowerBound, int upperBound)
        {
            List<int> Numbers = new List<int>();
            int result = 0;
            int n = 0;
            while (result < upperBound)
            {
                n++;
                result = n * (3 * n - 2);
                if (result > lowerBound)
                {
                    Numbers.Add(result);
                }
            }
            return Numbers;
        }
        public void EvaluatePermutations()
        {
            List<List<int>> figuralNumberLists = new List<List<int>>();
            figuralNumberLists.Add(GetTriangleNumbers(1000, 10000).Where(x => x.ToString().Substring(2, 1) != "0").ToList());
            figuralNumberLists.Add(GetSquareNumbers(1000, 10000).Where(x => x.ToString().Substring(2, 1) != "0").ToList());
            figuralNumberLists.Add(GetPentagonNumbers(1000, 10000).Where(x => x.ToString().Substring(2, 1) != "0").ToList());
            figuralNumberLists.Add(GetHexagonNumbers(1000, 10000).Where(x => x.ToString().Substring(2, 1) != "0").ToList());
            figuralNumberLists.Add(GetHeptagonNumbers(1000, 10000).Where(x => x.ToString().Substring(2, 1) != "0").ToList());
            figuralNumberLists.Add(GetOctagonNumbers(1000, 10000).Where(x => x.ToString().Substring(2, 1) != "0").ToList());

            List<IEnumerable<List<int>>> permutations = Permutator.Permute<List<int>>(figuralNumberLists).ToList();
            bool NoMatch = true;
            int currentListNumber = 0;
            while (NoMatch)
            {
                var listOfLists = permutations[currentListNumber].ToList();
                int firstNumber = 0;
                int secondNumber = 0;
                int thirdNumber = 0;
                int fourthNumber = 0;
                int fifthNumber = 0;
                int sixthNumber = 0;

                for (int i = 0; i < listOfLists[0].Count(); i++)
                {

                    var matches = listOfLists[1].Where(x => x.ToString().Substring(0, 2) == listOfLists[0][i].ToString().Substring(2, 2)).ToList();
                    if (matches.Any())
                    {
                        firstNumber = listOfLists[0][i];
                        for(int j = 0; j < matches.Count(); j++)
                        {
                            var secondMatches = listOfLists[2].Where(x => x.ToString().Substring(0, 2) == matches[j].ToString().Substring(2, 2)).ToList();
                            if(secondMatches.Any())
                            {
                                secondNumber = matches[j];
                                for (int k = 0; k < secondMatches.Count(); k++)
                                {
                                    var thirdMatches = listOfLists[3].Where(x => x.ToString().Substring(0, 2) == secondMatches[k].ToString().Substring(2, 2)).ToList();
                                    if (thirdMatches.Any())
                                    {
                                        thirdNumber = secondMatches[k];
                                        for (int l = 0; l < thirdMatches.Count(); l++)
                                        {
                                            var fourthMatches = listOfLists[4].Where(x => x.ToString().Substring(0, 2) == thirdMatches[l].ToString().Substring(2, 2)).ToList();
                                            if (fourthMatches.Any())
                                            {
                                                fourthNumber = thirdMatches[l];
                                                for (int m = 0; m < fourthMatches.Count(); m++)
                                                {
                                                    var fifthMatches = listOfLists[5].Where(x => x.ToString().Substring(0, 2) == fourthMatches[m].ToString().Substring(2, 2)).ToList();
                                                    if (fifthMatches.Any())
                                                    {
                                                        fifthNumber = fourthMatches[m];
                                                        for (int n = 0; n < fifthMatches.Count(); n++)
                                                        {
                                                            if(firstNumber.ToString().Substring(0,2) == fifthMatches[n].ToString().Substring(2, 2))
                                                            {
                                                                sixthNumber = fifthMatches[n];
                                                                Output = (firstNumber + secondNumber + thirdNumber + fourthNumber + fifthNumber + sixthNumber).ToString();
                                                                Console.WriteLine(firstNumber.ToString() + " " + secondNumber.ToString() + " " + thirdNumber.ToString() + " " + fourthNumber.ToString() + " " + fifthNumber.ToString() + " " + sixthNumber.ToString());
                                                                NoMatch = false;
                                                                break;

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                currentListNumber++;
            }
        }
        public override void Solve()
        {
            LogList = new List<string>();
            EvaluatePermutations();
        }
    }
}
